runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
install.packages("shinythemes")
runApp('shiny_app.R')
v = rep(0,28)
v
v = vector()
v
append(v,1)
v
v<- append(v,1)
v
v<- append(v,2)
v
v = vector()
for (i in 1:8){
for (j in (i+1):8){
if ((df$x[i]-df$x[j])*(df$y[i]-df$y[j]) > 0){
x <- 1
} else if ((df$x[i]-df$x[j])*(df$y[i]-df$y[j]) < 0){
x<- 1
} else {
x <- 0
}
v <- append(v,x)
}
}
v = vector()
for (i in 1:8){
for (j in (i+1):8){
if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j]))> 0){
x <- 1
} else if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j])) < 0){
x<- 1
} else {
x <- 0
}
v <- append(v,x)
}
}
(df$x[i]-df$x[j])*(df$y[i]-df$y[j])
(df$x[1]-df$x[2])*(df$y[1]-df$y[2])
v
v = vector()
v = vector()
for (i in 1:8){
for (j in (i+1):8){
if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j]))> 0){
x <- 1
} else if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j])) < 0){
x<- 1
} else {
x <- 0
}
v <- append(v,x)
}
}
df
v = vector()
for (i in 1:7){
for (j in (i+1):8){
if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j]))> 0){
x <- 1
} else if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j])) < 0){
x<- 1
} else {
x <- 0
}
v <- append(v,x)
}
}
v
(df$x[1]-df$x[8])*(df$y[1]-df$y[8])
v = vector()
for (i in 1:7){
for (j in (i+1):8){
if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j]))> 0){
x <- 1
} else if (((df$x[i]-df$x[j])*(df$y[i]-df$y[j])) < 0){
x<- -1
} else {
x <- 0
}
v <- append(v,x)
}
}
v
df
sum(v)
(8*7)/2
20/2
28/2
10/2
20/28
wilcox.test(df$x-df$y, exact = F, correct = F)
df$diff <- df$x - df$y
df
df$diff <- df$x - df$y
df$sign_rank <- rank(abs(df$diff))*sign(df$diff)
df
wilcox.test(df$diff, exact = T, correct = F)
wilcox.test(df$diff, exact = F, correct = F)
-4-6.5-5
8+6.5
5+2
5+3.5
wilcox.test(df$diff, exact = F, correct = F)
t.test(df$x, df$y, paired = TRUE, alternative = "two.sided")
var(df$diff)
1/(var(df$diff)/8)
1/(sqrt(var(df$diff)/8))
pbinom(5,60,1/90)
1-pbinom(4,60,1/90)
1/20
62*5
1-pbinom(4,60,1/90)
1-(1-p)^310
p <- 1-pbinom(4,60,1/90)
1-(1-p)^310
1-(1-0.0006)^310
q <- 1-(1-p)^310
1-(1-q)^500
1000/6
pbinom(200, 1000, 1/6)-pbinom(149, 1000, 1/6)
sqrt(var)
mean = 1000/6
var = (1000/6)*(5/6)
sqrt(var)
sqrt(var/1000)
pnorm(200, mean, sqrt(var/1000))
pnorm(200, mean, sqrt(var/1000)) - pnorm(150, mean, sqrt(var/1000))
pnorm(200, mean, sqrt(var)) - pnorm(150, mean, sqrt(var))
exp(-1)
1-exp(-1)
runApp('shiny_app.R')
pitchfork %>% filter(score == 0.1)
pitchfork %>% filter(score <= 0.1)
pitchfork %>% filter(score <= 0.1)
pitchfork %>% filter(score <= 0.1) %>% select(artist, album, link)
pitchfork %>% group_by(year) %>% mutate(lowest_score = min(score)) %>% filter(score == lowest_score)
pitchfork %>% group_by(release_year) %>% mutate(lowest_score = min(score)) %>% filter(score == lowest_score)
pitchfork %>% group_by(release_year) %>% mutate(lowest_score = min(score)) %>% filter(score == lowest_score) %>% filter(release_year >= 1995)
pitchfork %>% group_by(release_year) %>% mutate(lowest_score = min(score)) %>%
filter(score == lowest_score) %>% filter(release_year >= 1995) %>% arrange(desc(release_year))
lowest_scores <- pitchfork %>% group_by(date) %>% mutate(lowest_score = min(score)) %>%
filter(score == lowest_score) %>% filter(release_year >= 1995) %>% arrange(desc(release_year)) %>% select(artist, album, score, )
lowest_scores <- pitchfork %>% group_by(release_year) %>% mutate(lowest_score = min(score)) %>%
filter(score == lowest_score) %>% filter(release_year >= 1995) %>% arrange(desc(release_year)) %>% select(artist, album, score, )
lowest_scores <- pitchfork %>% group_by(release_year) %>% mutate(lowest_score = min(score)) %>%
filter(score == lowest_score) %>% filter(release_year >= 1995) %>% arrange(desc(release_year)) %>% select(artist, album, score, date, release_year)
lowest_scores
lowest_scores <- pitchfork %>% group_by(release_year) %>% mutate(lowest_score = min(score)) %>%
filter(score == lowest_score) %>% filter(release_year >= 1995) %>% arrange(desc(release_year)) %>% select(artist, album, score, date, release_year, link)
print(lowest_scores)
lowest_scores <- pitchfork %>% group_by(release_year) %>% mutate(lowest_score = min(score)) %>%
filter(score == lowest_score) %>% filter(release_year >= 1995) %>% arrange(desc(release_year)) %>% select(artist, album, score, date, release_year, link)
head(lowest_scores, 30)
head(lowest_scores)
print(lowest_scores)
print(lowest_scores, n=30)
pitchfork = read.csv("pitchfork.csv", header = TRUE)
pitchfork = as_tibble(pitchfork)
pitchfork <- pitchfork %>%
mutate(simplified_genre = word(genre,1,sep = ",")) %>%
mutate(date = mdy(date)) %>%
mutate(after_aquisition = ifelse(date > "2015-10-13", 1, 0))
head(pitchfork)
lowest_scores <- pitchfork %>% group_by(year(date)) %>% mutate(lowest_score = min(score)) %>%
filter(score == lowest_score) %>% arrange(desc(date)) %>% select(artist, album, score, date, release_year, link)
print(lowest_scores, n=30)
pitchfork %>% filter(year(date) <= 1998)
pitchfork %>% filter(release_year <= 1998)
n <- 331
(N*(N-5)*(495-N))/(497-N)
N <- 331
(N*(N-5)*(495-N))/(497-N)
choose(3,2)
(choose(N,4)*choose(496-N,2))/(choose(N-1,4)*choose(497-N,2))
N <- 332
(N*(N-5)*(495-N))/(497-N)
(choose(N,4)*choose(496-N,2))/(choose(N-1,4)*choose(497-N,2))
(N*(495-N))/((497-N)*(N-4))
4*497
1988/4
1988/2
1988/6
5+3.5
1/(sqrt(var(df$diff)/8))
var(df$diff)
df2 <- data.frame(age = character(4),n = numeric(4), mean = numeric(4), sd = numeric(4))
df2$age <- c("25-34", "35-44", "45-54", "55-64")
df2$n <- c(73, 97, 74, 53)
df2$mean <- c(22.9, 26.2, 22.0, 23.8)
df2$sd <- c(10.3, 13.0, 7.4, 10.0)
df2
aov(age ~ mean)
aov(df2$age ~ df2$mean)
ggplot(data = df, aes(x = mean, y = sd)) +
point()
ggplot(data = df, aes(x = mean, y = sd)) +
geom_point()
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point()
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
title("Variance vs. Standard Deviation for Each Group")
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_text(label = df$age)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_text(label = df2$age)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = 5, vjust = 5)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = 1, vjust = 1)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = -1.2, vjust = -1.2)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = -1, vjust = -1)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1)
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(20, 28) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation")
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation")
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df2, aes(x = mean, y = sd)) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
ylim(6, 14) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
(13^2)/(7.4^2)
(13^2)/(10.3^2+13^2+7.4^2+10^2)  #Cochran's test
#### Part (e) ####
ggplot(data = df2, aes(x = age, y = mean)) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
ylim(6, 14) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df2, aes(x = age, y = mean, group = age)) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
ylim(6, 14) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
#### Part (e) ####
ggplot(data = df2, aes(x = age, y = mean), group = age) +
geom_point() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
ylim(6, 14) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df2, aes(x = age, y = mean)) +
geom_bar() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
ylim(6, 14) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df2, aes(x = age, y = mean)) +
geom_beeswarm() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
ylim(6, 14) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
install.packages("ggbeeswarm")
install.packages("ggforce")
library(cowplot)
library(ggbeeswarm)
library(ggforce)
library(ggplot2)
ggplot(data = df2, aes(x = age, y = mean)) +
geom_beeswarm() +
geom_label(label = df2$age, hjust = -0.1, vjust = -0.1) +
xlim(21, 27) +
ylim(6, 14) +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df2, aes(x = age, y = mean)) +
geom_beeswarm()
ggplot(data = df2, aes(x = age, y = mean)) +
geom_beeswarm() +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df2, aes(x = age, y = mean, size = 2)) +
geom_beeswarm() +
labs(title="Variance vs. Standard Deviation for Each Group",
x ="Group Means", y = "Group Standard Deviation") +
theme(plot.title = element_text(hjust = 0.5))
#### Part (e) ####
ggplot(data = df2, aes(x = age, y = mean)) +
geom_beeswarm() +
labs(title="Mean of Each Group",
x ="Groups", y = "Group Means") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df2, aes(x = age, y = mean)) +
geom_beeswarm() +
labs(title="Plot of Data: Groups vs. Group Means",
x ="Groups", y = "Group Means") +
theme(plot.title = element_text(hjust = 0.5))
(72(10.3)^2+96(13)^2+73(7.4)^2+52(10)^2)/(73+97+74+53-4)
(72*(10.3^2)+96*(13^2)+73*(7.4^2)+52*(10^2))/(73+97+74+53-4)
((72*(10.3^2))+(96*(13^2))+(73*(7.4^2))+(52*(10^2)))/(73+97+74+53-4)
mean(df2$mean)
73+97+74+53
total.mean = ((73*22.9)+(97*26.2)+(74*22)+(53*23.8))/(73+97+74+53)
total.mean
((73*((22.9-total.mean)^2))+(97*((26.2-total.mean)^2))
+(74*((22-total.mean)^2))+(53*((23.8-total.mean)^2)))/(4)
73+97+74+53-4
qf(0.95,4,293)
((73*((22.9-total.mean)^2))+(97*((26.2-total.mean)^2))
+(74*((22-total.mean)^2))+(53*((23.8-total.mean)^2)))/(4)
within.mean = ((72*(10.3^2))+(96*(13^2))+(73*(7.4^2))+(52*(10^2)))/(73+97+74+53-4)
total.mean = ((73*22.9)+(97*26.2)+(74*22)+(53*23.8))/(73+97+74+53)
between.mean = ((73*((22.9-total.mean)^2))+(97*((26.2-total.mean)^2))
+(74*((22-total.mean)^2))+(53*((23.8-total.mean)^2)))/(4)
between.mean/within.mean
qf(0.95,4,293)
within.mean
293+3
total.mean = ((73*22.9)+(97*26.2)+(74*22)+(53*23.8))/(73+97+74+53)
between.mean = ((73*((22.9-total.mean)^2))+(97*((26.2-total.mean)^2))
+(74*((22-total.mean)^2))+(53*((23.8-total.mean)^2)))/(3)
between.mean/within.mean
qf(0.95,3,293)
between.mean
((73*22.9)+(97*26.2)+(74*22)+(53*23.8))
((73*((22.9-total.mean)^2))+(97*((26.2-total.mean)^2))
+   +(74*((22-total.mean)^2))+(53*((23.8-total.mean)^2)))
7102.5+853.7406
df3 <- data.frame(control = numeric(8),renal.failure = numeric(8), anephric = numeric(8))
df3$control <- c(3.7, 3.4, 2.4, 3.3, 2.4, 4.8, 3.2, NA)
df3$renal.failure <- c(3.0, 3.1, 4.4, 5.1, 1.9, 3.4, 2.9, 3.8)
df3$anephric <- c(6.7, 2.6, 3.4, 4.0, 3.1, 2.7, 5.3, NA)
df3
df3 <- data.frame(control = numeric(8),renal_failure = numeric(8), anephric = numeric(8))
df3$control <- c(3.7, 3.4, 2.4, 3.3, 2.4, 4.8, 3.2, NA)
df3$renal_failure <- c(3.0, 3.1, 4.4, 5.1, 1.9, 3.4, 2.9, 3.8)
df3$anephric <- c(6.7, 2.6, 3.4, 4.0, 3.1, 2.7, 5.3, NA)
library(tidyr)
library(dplyr)
df3 %>%
pivot_longer(names_to = "group", values_to = "values")
df3 %>%
pivot_longer(everything(), names_to = "group", values_to = "values")
df3 <- df3 %>% pivot_longer(everything(), names_to = "group", values_to = "values")
df3 <- df3 %>% pivot_longer(everything(), names_to = "group", values_to = "values") %>% as.factor(group)
df3$group <- as.factor(df3$group)
av <- aov(group ~ values, data = df3)
anova(av)
df3
df3 <- data.frame(control = numeric(8),renal_failure = numeric(8), anephric = numeric(8))
df3$control <- c(3.7, 3.4, 2.4, 3.3, 2.4, 4.8, 3.2, NA)
df3$renal_failure <- c(3.0, 3.1, 4.4, 5.1, 1.9, 3.4, 2.9, 3.8)
df3$anephric <- c(6.7, 2.6, 3.4, 4.0, 3.1, 2.7, 5.3, NA)
df3 <- df3 %>% pivot_longer(everything(), names_to = "group", values_to = "values")
df3 <- df3 %>% pivot_longer(everything(), names_to = "group", values_to = "values")
df3$group <- as.factor(df3$group)
av <- aov(values ~ group, data = df3)
anova(av)
df3
av
8+7+7
anova(av)
1.7008+24.6229
0.85039+1.29594
df3$x1 = rep(0,8)
df3$x1 = rep(0,24)
df3$x1, x2, x3 = rep(0,24)
df3$x1 = rep(0,24)
df3$x2 = rep(0,24)
df3$x3 = rep(0,24)
if (df3$group == "control"){
df3$x1 = 1
} elseif (df3$group == "anephric"){
df3$x3 = 1
} elseif (df3$group == "renal_failure"){
df3$x2 = -7/8
}
df3$x1 = rep(0,24)
df3$x2 = rep(0,24)
df3$x3 = rep(0,24)
if (df3$group == "control"){
df3$x1 = 1
} else if (df3$group == "anephric"){
df3$x3 = 1
} else if (df3$group == "renal_failure"){
df3$x2 = -7/8
}
df3
for(i in 1:24){
if (df3$group[i] == "control"){
df3$x1[i] = 1
} else if (df3$group == "anephric"){
df3$x3[i] = 1
} else if (df3$group == "renal_failure"){
df3$x2[i] = -7/8
}
}
df
df3
ifelse(df3$group == "control", 1, 0)
df3$x1 = ifelse(df3$group == "control", 1, 0)
df3$x3 = ifelse(df3$group == "anephric", 1, 0)
df3$x2 = ifelse(df3$group == "renal_failure", -7/8, 0)
df3
aov(value ~ x1 + x2 + x3, data = df3)
aov(values ~ x1 + x2 + x3, data = df3)
av
aov(values ~ x1 + x3 + x2, data = df3)
anova(av2)
av2 = aov(values ~ x1 + x3 + x2, data = df3)
anova(av2)
av <- aov(values ~ group, data = df3)
anova(av)
setwd("C:/Users/Emman/Dropbox/UNC Biostatistics/BIOS 611/bios-611-project")
setwd("/source_data")
setwd("C:/Users/Emman/Dropbox/UNC Biostatistics/BIOS 611/bios-611-project")
pitchfork = read.csv("source_data/pitchfork.csv", header = TRUE)
dir.create("/derived_data")
if (!file.exists("/derived_data")){
dir.create("/derived_data")
} else {
}
?dir.exists
if (!dir.exists("/derived_data")){
dir.create("/derived_data")
write.csv("derived_data/pitchfork_clean.csv")
} else {
write.csv("derived_data/pitchfork_clean.csv")
}
?dir.create
getwd()
if (!dir.exists("derived_data")){
dir.create("derived_data")
write.csv("derived_data/pitchfork_clean.csv")
} else {
write.csv("derived_data/pitchfork_clean.csv")
}
dir.create("derived_data")
if (!dir.exists("derived_data")){
dir.create("derived_data")
write.csv("derived_data/pitchfork_clean.csv")
} else {
write.csv("derived_data/pitchfork_clean.csv")
}
write.csv("/derived_data/pitchfork_clean.csv")
pitchfork = read.csv("source_data/pitchfork.csv", header = TRUE)
pitchfork = as_tibble(pitchfork)
pitchfork_clean <- pitchfork %>%
mutate(simplified_genre = word(genre,1,sep = ",")) %>%
mutate(date = mdy(date)) %>%
mutate(after_aquisition = ifelse(date > "2015-10-13", 1, 0))
library(tidyverse)
library(stringr)
library(lubridate)
library(highcharter)
library(dplyr)
pitchfork = read.csv("source_data/pitchfork.csv", header = TRUE)
pitchfork = as_tibble(pitchfork)
pitchfork_clean <- pitchfork %>%
mutate(simplified_genre = word(genre,1,sep = ",")) %>%
mutate(date = mdy(date)) %>%
mutate(after_aquisition = ifelse(date > "2015-10-13", 1, 0))
write.csv(pitchfork_clean, "/derived_data/pitchfork_clean.csv")
write.csv(pitchfork_clean, "derived_data/pitchfork_clean.csv")
